definitions:
  chore.rootResponseSchema:
    properties:
      message:
        type: string
    type: object
  cluster.ClusterConfigurationSchema:
    properties:
      memberCount:
        type: integer
    type: object
  cluster.ClusterStatus:
    enum:
    - red
    - yello
    - green
    type: string
    x-enum-varnames:
    - RED
    - YELLO
    - GREEN
  cluster.ClusterStatusSchema:
    properties:
      status:
        $ref: '#/definitions/cluster.ClusterStatus'
    type: object
  cluster.peerListResponseSchema:
    properties:
      peers:
        items:
          $ref: '#/definitions/cluster.peerSchema'
        type: array
    type: object
  cluster.peerSchema:
    properties:
      serverIP:
        type: string
      serverName:
        type: string
    type: object
  cluster.registerRequestSchema:
    properties:
      serverIP:
        type: string
      serverName:
        type: string
    type: object
  cluster.registerResponseSchema:
    properties:
      message:
        type: string
    type: object
  core.dataDeleteSchema:
    properties:
      key:
        type: string
    type: object
  core.dataRequestSchema:
    properties:
      key:
        type: string
      value:
        type: string
    type: object
  rebitcask_api_chore.healthzResponseSchema:
    properties:
      message:
        type: string
    type: object
  rebitcask_discovery_api_chore.healthzResponseSchema:
    properties:
      message:
        type: string
    type: object
info:
  contact: {}
paths:
  /:
    get:
      consumes:
      - application/json
      description: root path handler
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/chore.rootResponseSchema'
      summary: root path handler
  /cluster/configuration:
    get:
      description: cluster configuration
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/cluster.ClusterConfigurationSchema'
      summary: cluster configuration
  /cluster/finished-peer/:
    post:
      description: get all cluster members
      parameters:
      - description: when the peer finished everything, waiting cluster to startup
          call this api
        in: body
        name: RequestBody
        required: true
        schema:
          $ref: '#/definitions/cluster.peerSchema'
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/cluster.peerSchema'
      summary: get all registered cluster members
  /cluster/peers:
    get:
      description: get all cluster members
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/cluster.peerListResponseSchema'
      summary: get all registered cluster members
  /cluster/register:
    post:
      description: register cluster members
      parameters:
      - description: register cluster members
        in: body
        name: RequestBody
        required: true
        schema:
          $ref: '#/definitions/cluster.registerRequestSchema'
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/cluster.registerResponseSchema'
      summary: register cluster members
  /cluster/status:
    get:
      description: cluster status
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/cluster.ClusterStatusSchema'
      summary: cluster status
  /core:
    delete:
      consumes:
      - application/json
      description: delete key
      parameters:
      - description: request body for delete an entry
        in: body
        name: RequestBody
        required: true
        schema:
          $ref: '#/definitions/core.dataDeleteSchema'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/core.dataDeleteSchema'
      summary: delete key
    get:
      description: get value by key
      parameters:
      - description: query database with key
        in: query
        name: key
        required: true
        type: string
      responses:
        "200":
          description: OK
          schema:
            type: string
      summary: get value by key
    patch:
      consumes:
      - application/json
      description: update key / value
      parameters:
      - description: request body for update an entry
        in: body
        name: RequestBody
        required: true
        schema:
          $ref: '#/definitions/core.dataRequestSchema'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/core.dataRequestSchema'
      summary: update key / value
    post:
      consumes:
      - application/json
      description: insert key / value
      parameters:
      - description: request body for create an entry
        in: body
        name: RequestBody
        required: true
        schema:
          $ref: '#/definitions/core.dataRequestSchema'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/core.dataRequestSchema'
      summary: insert key / value
  /healthz:
    get:
      description: healthz endpoint
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/rebitcask_discovery_api_chore.healthzResponseSchema'
      summary: healthz endpoint
swagger: "2.0"
