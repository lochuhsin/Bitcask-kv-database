// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v4.25.1
// source: server/rebitcaskpb/rebitcask.proto

package rebitcaskpb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	chorepb "rebitcask/server/chorepb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	RebitcaskService_GetHeartBeat_FullMethodName = "/rebitcaskpb.RebitcaskService/GetHeartBeat"
)

// RebitcaskServiceClient is the client API for RebitcaskService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type RebitcaskServiceClient interface {
	GetHeartBeat(ctx context.Context, in *chorepb.GetHeartBeatRequest, opts ...grpc.CallOption) (*chorepb.GetHeartBeatResponse, error)
}

type rebitcaskServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewRebitcaskServiceClient(cc grpc.ClientConnInterface) RebitcaskServiceClient {
	return &rebitcaskServiceClient{cc}
}

func (c *rebitcaskServiceClient) GetHeartBeat(ctx context.Context, in *chorepb.GetHeartBeatRequest, opts ...grpc.CallOption) (*chorepb.GetHeartBeatResponse, error) {
	out := new(chorepb.GetHeartBeatResponse)
	err := c.cc.Invoke(ctx, RebitcaskService_GetHeartBeat_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// RebitcaskServiceServer is the server API for RebitcaskService service.
// All implementations must embed UnimplementedRebitcaskServiceServer
// for forward compatibility
type RebitcaskServiceServer interface {
	GetHeartBeat(context.Context, *chorepb.GetHeartBeatRequest) (*chorepb.GetHeartBeatResponse, error)
	mustEmbedUnimplementedRebitcaskServiceServer()
}

// UnimplementedRebitcaskServiceServer must be embedded to have forward compatible implementations.
type UnimplementedRebitcaskServiceServer struct {
}

func (UnimplementedRebitcaskServiceServer) GetHeartBeat(context.Context, *chorepb.GetHeartBeatRequest) (*chorepb.GetHeartBeatResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetHeartBeat not implemented")
}
func (UnimplementedRebitcaskServiceServer) mustEmbedUnimplementedRebitcaskServiceServer() {}

// UnsafeRebitcaskServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to RebitcaskServiceServer will
// result in compilation errors.
type UnsafeRebitcaskServiceServer interface {
	mustEmbedUnimplementedRebitcaskServiceServer()
}

func RegisterRebitcaskServiceServer(s grpc.ServiceRegistrar, srv RebitcaskServiceServer) {
	s.RegisterService(&RebitcaskService_ServiceDesc, srv)
}

func _RebitcaskService_GetHeartBeat_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(chorepb.GetHeartBeatRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RebitcaskServiceServer).GetHeartBeat(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RebitcaskService_GetHeartBeat_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RebitcaskServiceServer).GetHeartBeat(ctx, req.(*chorepb.GetHeartBeatRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// RebitcaskService_ServiceDesc is the grpc.ServiceDesc for RebitcaskService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var RebitcaskService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "rebitcaskpb.RebitcaskService",
	HandlerType: (*RebitcaskServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetHeartBeat",
			Handler:    _RebitcaskService_GetHeartBeat_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "server/rebitcaskpb/rebitcask.proto",
}
